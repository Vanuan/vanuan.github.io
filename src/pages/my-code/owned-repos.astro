---
import Layout from "../../layouts/Layout.astro";
import path from "node:path";
import { manualRepos } from "../../data/all-repos";
import type { GitHubRepo } from "../../types";
import PageHeader from "../../components/PageHeader.astro";
import ProjectCard from "../../components/ProjectCard.astro";
import CategoryFilter from "../../components/CategoryFilter.astro";
import Breadcrumbs from "../../components/Breadcrumbs.astro";
import {
    fetchGitHubData,
    buildOrgRepoApiUrl,
    buildUserRepoApiUrl,
    cacheDir,
} from "../../lib/github";
import { GITHUB_USERNAME, GITHUB_OWNED_ORGANIZATIONS } from "../../consts";

const perPage = 100;

// Fetch personal repos
const personalApiUrl = buildUserRepoApiUrl(GITHUB_USERNAME, perPage);
const personalCacheFile = path.join(
    cacheDir,
    "github-personal-repos-cache.json",
);

const personalRepos = (await fetchGitHubData({
    apiUrl: personalApiUrl,
    cacheFile: personalCacheFile,
})) as GitHubRepo[];

// Fetch org repos
const ownedOrgReposPromises = GITHUB_OWNED_ORGANIZATIONS.map(async (org) => {
    const orgApiUrl = buildOrgRepoApiUrl(org, perPage);
    const orgCacheFile = path.join(
        cacheDir,
        `github-org-${org}-repos-cache.json`,
    );
    return (await fetchGitHubData({
        apiUrl: orgApiUrl,
        cacheFile: orgCacheFile,
    })) as GitHubRepo[];
});

const ownedOrgRepos = (await Promise.all(ownedOrgReposPromises)).flat();

// Combine the data
const allRepos: GitHubRepo[] = [
    ...manualRepos,
    ...personalRepos,
    ...ownedOrgRepos,
];

const categories = [
    ...new Set(allRepos.map((repo) => repo.category).filter(Boolean)),
];
---

<Layout
    title="Owned Repositories | My Code | {SITE_TITLE}"
    description="My original GitHub repositories, curated projects, and owned organization repos."
>
    <Breadcrumbs
        segments={[
            { label: "My Code", path: "/my-code" },
            { label: "Owned Repositories", path: "/my-code/owned-repos" },
        ]}
    />
    <PageHeader
        title="Combined Repositories"
        description="My original GitHub repositories, curated projects, and repos from organizations I own."
    />

    <section class="py-10">
        <h2 class="text-2xl font-semibold mb-4">Filter by Category</h2>
        <CategoryFilter categories={categories} />

        <div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3" id="project-grid">
            {
                allRepos.map((repo) => (
                    <ProjectCard
                        name={repo.name}
                        description={repo.description}
                        link={repo.githubLink || repo.html_url}
                        owner={repo.owner?.login}
                        category={repo.category}
                        context={repo.context}
                    />
                ))
            }
        </div>
    </section>
</Layout>
